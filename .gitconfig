[user]
 	email = github@elvis.ai
 	name = elvis kahoro

[alias]

  a         = "!gt add"
  aa        = "!gt add ."
  aaa       = aa
  aaaa      = aa
  absorb    = "!gt absorb"
  ab        = absorb
  abb       = absorb
  abn       = absorb
  cab       = asborb
  ap        = "!gt add --patch"
  au        = "!gt add -u"
  aiu       = au
  ai        = au
  aui       = au
  gau       = au
  aq        = au
  qu        = au
  auy       = au
  auu       = au
  aug       = au
  ua        = au
  aui       = au
  gau       = au
  auq       = au
  aau       = au
  dau       = au
  gau       = au
  aug       = au
  auca      = "!gt au && gt ca"

  bc        = "!gt create"
  gbc       = switch -c
  bcx       = bc
  bcdl      = bc
  cdl       = bc
  cb        = bc
  bce       = bc
  bvc       = bc
  bci       = "!gt create --insert"
  gbc       = switch -c
  bcn       = "!gt branch create --no-verify"
  be        = "!gt downstack edit"
  gbl       = branch -a
  bl        = branch --list
  bd        = "!f() { if [ $# -eq 0 ]; then gt down; else gt down $1; fi }; f"
  bds       = bd
  db        = bd
  bp        = bd
  gbd       = bd
  bdd       = "!gt down && git diff HEAD~$1"
  bdl       = "!gt branch delete"
  brd       = "!gt branch unbranch"
  gbrd      = branch -D
  bgrd      = gbrd
  brvd      = gbrd
  grb       = gbrd
  brd       = gbrd
  gdd       = gbrd
  grd       = gbrd
  gbdd      = gbrd
  grbd      = gbrd
  gbtd      = gbrd
  gbr       = gbrd
  gbd       = gbrd
  brf       = "!gt branch fold"
  brsf      = brf
  brn       = "!gt rename"
  rbn       = brn
  brsp      = "!gt split"
  bsp       = brsp
  brsq      = "!gt squash"
  brrsq     = brsq
  brt       = "!gt track"
  bt        = brt
  btt       = bt
  btm       = "!gt bottom"
  bu        = "!f() { if [ $# -eq 0 ]; then gt up; else gt up $1; fi }; f"
  bn        = bu
  by        = bu
  nu        = bu
  buu       = bu
  dbu       = bu
  lbu       = bu
  ub        = bu
  bug       = bu
  gbu       = bu
  buy       = bu
  buff      = "!gt up && git push --force"
  #bucc     = "!gt upstack test 'trunk check --fix --ignore-git-state'"
  bucc      = "!gt up && trunk check --fix --filter=-trivy,-checkov,-osv-scanner,-semgrep"
  bcc       = bucc
  buc       = bucc
  bud       = "!gt up && git diff HEAD~$1"
  bca       = "!gt up && trunk check --fix --ignore-git-state --filter=-trivy,-checkov,-osv-scanner"

  ca        = "!gt modify"
  ac        = ca
  aca       = ca
  cva       = ca
  gca       = commit --amend --no-edit
  cam       = "!gt modify"
  acam      = cam
  cvam      = cam
  acm       = cam
  cma       = cam
  canm      = cam
  cc        = "!trunk check --fix --filter=-trivy,-checkov,-osv-scanner,-semgrep"
  gcc       = cc
  cxc       = cc
  cca       = "!trunk check --fix --all --ignore-git-state"
  ccf       = cca
  #cca      = "!trunk check --fix --all --ignore-git-state --filter=-trivy,-checkov,-osv-scanner,-trufflehog"
  cac       = cca
  ccc       = cca
  ccca      = cca
  cl        = "!chalk lint"
  ccl       = cl
  chalk     = "!chalk"
  ch        = checkout
  cv        = ch
  gh        = ch
  hc        = ch
  bch       = ch
  hch       = ch
  gcvo      = ch
  cvh       = ch
  chr       = checkout run
  cloen     = clone
  cr        = chr
  check     = "!trunk check"
  co        = "! gt modify -c"
  gco       = commit
  gcxo      = gco
  cgco      = gco
  gso       = gco
  ggco      = gco
  comit     = gco
  goc       = gco
  gcp       = gco
  com       = "!gt commit -m"
  con       = "!gt commit create --no-verify"
  gcon      = commit --no-verify
  ct        = "!gt continue"
  ctr       = ct
  continue  = ct
  cp        = "!gt cherry-pick"
  cpa       = "!gt cherry-pick --abort"
  cpc       = "!gt cherry-pick --continue"

  d         = "!f() { if [ $# -eq 0 ]; then git diff; else git diff HEAD~$1; fi }; f"
  dash      = "!gh dash"
  f         = d
  dd        = d 1
  d1        = d 1
  dc        = "!gt diff --cached"
  dcd       = dc
  ddc       = dc
  ds        = "!f() { if [ $# -eq 0 ]; then git show --name-only; else git log --name-only -$1; fi }; f"
  dsr       = "!gt downstack restack"
  dst       = "!gt downstack test"
  dl        = "!f() { if [ $# -eq 0 ]; then git diff-tree --no-commit-id --name-status -r HEAD; else git diff-tree --no-commit-id --name-status -r HEAD~$1; fi }; f"
  gdl       = dl
  dk        = dl
  ld        = dl
  dls       = dl
  ldl       = dl
  ddl       = dl
  dlk       = dl
  du        = "!less $(git ls-files --others --exclude-standard)"
  drun      = branch -D run

  g         = "!git"
  get       = "!gt get"
  gh        = "!gh"

  iit       = init
  int       = init
  inti      = init

  l         = "!gt log --reverse --show-untracked"
  al        = l
  k         = l
  sl        = l
  ll        = "!gt log short --reverse --show-untracked"
  ls        = ll
  gl        = log
  lt        = log --oneline

  m         = checkout main
  gm        = m
  dm        = m

  o         = "!gh pr view --web || gh repo view --web"
  open      = o
  go        = "!gt pr"
  gfo       = go
  onto      = "!gt upstack onto"

  pbd       = "!git push --no-verify origin --delete $(git branch --show-current)"
  pbf       = "!gt push -u origin HEAD"
  pbdf      = "!git push --no-verify origin --delete $(git branch --show-current) && git push --no-verify -u origin HEAD"
  pl        = "!gt pull"
  puill     = pl
  ipull     = pl
  poull     = pl
  pou       = pl
  pul       = pl
  oul       = pl
  oull      = pl
  ull       = pl
  plm       = "!gt fetch origin main:main"
  pom       = pull origin main
  prev      = "!f() { if [ $# -eq 0 ]; then git checkout HEAD^1; else git checkout HEAD^$1; fi }; f"
  prv       = "!gt pr"
  gpr       = "!gh pr create --web"
  pshy      = push
  pusuh     = push
  puis      = push
  puish     = push
  pushj     = push
  psu       = push
  pus       = push
  pusj      = push
  psuh      = push
  ppush     = push
  psh       = push
  puh       = push
  poush     = push
  oush      = push
  piush     = push
  pusdh     = push
  puff      = push --force

  rse       = rs
  r         = "!f() { if [ $# -eq 0 ]; then git reset; else git reset HEAD~$1 --mixed; fi }; f"
  rest      = r
  reet      = r
  rset      = r
  rst       = r
  reest     = r
  res       = r
  e         = r
  rcb       = "!vim ~/.bashrc"
  rcg       = "!vim ~/.gitconfig"
  rebae     = rebase
  reabse    = rebase
  rebse     = rebase
  rebae     = rebase
  rb        = "!gt rebase"
  rba       = "!gt rebase --abort"
  rbm       = "!gt rebase main"
  rbc       = "!gt continue"
  grbc      = rebase --continue
  reo       = "!gt reorder"
  rr        = "!reflex run"
  rs        = "!gt sync"

  s         = status
  sg        = s
  gs        = s
  #ss       = "!gh pr create"
  ss        = "!gt submit --cli --ai"
  ssg       = "!gh pr create --web"
  sgs       = ssg
  sss       = ss
  sds       = ss
  gss       = ssg
  ssp       = ssg
  sw        = "!gt switch"
  swc       = "!gt switch -c"
  sh        = "!f() { if [ $# -eq 0 ]; then git show; else git show HEAD~$1; fi }; f"
  gsq       = "!f() { if [ $# -gt 2 ]; then echo "must be more than one"; else git rebase -i HEAD~$1; fi }; f"
  sta       = "!gt stash"
  atash     = sta
  tas       = sta
  stah      = sta
  stahs     = sta
  stsh      = sta
  stsa      = sta
  tsash     = sta
  bta       = sta
  stahs     = sta
  tash      = sta
  stas      = sta
  stp       = "!gt stash pop"
  spt       = stp
  stop      = stp
  tp        = stp
  sto       = stp
  sp        = stp
  stpo      = stp
  st        = "!gt stash --patch"
  ta        = st
  astash    = stash
  stau      = "!gt stash --include-untracked"
  stcc      = "!gt stash clear"
  std       = "!gt stash drop"
  tsd       = std
  setd      = std
  stdt      = std
  sted      = std
  stgd      = std
  std2      = "!gt stash drop && gt stash drop"
  stl       = "!gt stash list"
  sts       = "!gt stash show"
  sinit     = submodule init
  su        = submodule update
  sur       = submodule update --init --recursive
  sinitr    = sur
  smain     = "!git submodule foreach --recursive `git checkout main`"
  spull     = "!git submodule foreach --recursive `git pull`"
  spush     = "!f() { if [ $# -eq 0 ]; then git submodule foreach --recursive "git add ."; git submodule foreach --recursive "git commit -m c"; git push --recurse-submodules=on-demand; else git submodule foreach --recursive "git add ."; git submodule foreach --recursive "git commit -m $1"; git push --recurse-submodules=on-demand; fi } f"
  staash    = stash
  sstash    = submodule foreach --recursive "git stash"
  astsh     = stash
  sync      = "!gt sync"

  t         = "!pytest --ignore-glob='*/pycord/*' --import-mode=prepend"
  test      = "!pre-commit run --all-files"
  top       = "!gt top"
  vtop      = top
  op        = top
  otp       = top
  topd      = "!gt top && gt down"
  topn      = topd
  topb      = topd

  u         = au
  uso       = "!gt move"
  usor      = uso
  usro      = uso
  usi       = uso
  usoi      = uso
  usso      = uso
  uos       = uso
  suo       = uso
  usp       = uso
  pusr      = "!git push && gt restack --upstack"
  psur      = pusr
  psr       = pusr
  usr       = "!gt restack --upstack"
  us        = usr
  uisr      = usr
  usir      = usr
  usrt      = usr
  sur       = usr
  ust       = "!gt upstack test"

  x         = checkout -
  count-lines= "!git log --author=\"$1\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' #"

  llm-commit= "!git --no-pager diff HEAD~1 | ollama run wizardlm2  $'Take the passed in diff and create a commit summary that adheres to the rules outlined in conventional commit. Do not explain why it adheres to conventional commits, just return the commit message. All explanations should be in bullet format \n\nThe commit message should be structured as follows:\n\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n\nThe commit contains the following structural elements, to communicate intent to the consumers of your library:\n\nfix: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in Semantic Versioning).\nfeat: a commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in Semantic Versioning).\nBREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type.\ntypes other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:, test:, and others.\nfooters other than BREAKING CHANGE: <description> may be provided and follow a convention similar to git trailer format.\n\nAdditional types are not mandated by the Conventional Commits specification, and have no implicit effect in Semantic Versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit’s type, to provide additional contextual information and is contained within parenthesis, e.g., feat(parser): add ability to parse arrays.\n\nExamples\nCommit message with description and breaking change footer\n\nfeat: allow provided config object to extend other configs\n\nBREAKING CHANGE: `extends` key in config file is now used for extending other config files\n\nCommit message with ! to draw attention to breaking change\n\nfeat!: send an email to the customer when a product is shipped\n\nCommit message with scope and ! to draw attention to breaking change\n\nfeat(api)!: send an email to the customer when a product is shipped\n\nCommit message with both ! and BREAKING CHANGE footer\n\nchore!: drop support for Node 6\n\nBREAKING CHANGE: use JavaScript features not available in Node 6.\n\nCommit message with no body\n\ndocs: correct spelling of CHANGELOG\n\nCommit message with scope\n\nfeat(lang): add Polish language\n\nCommit message with multi-paragraph body and multiple footers\n\nfix: prevent racing of requests\n\nIntroduce a request id and a reference to latest request. Dismiss incoming responses other than from latest request.\n\nRemove timeouts which were used to mitigate the racing issue but are obsolete now.\n\nReviewed-by: Z\nRefs: #123\n\nSpecification\nThe key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.\n\nCommits MUST be prefixed with a type, which consists of a noun, feat, fix, etc., followed by the OPTIONAL scope, OPTIONAL !, and REQUIRED terminal colon and space.\nThe type feat MUST be used when a commit adds a new feature to your application or library.\nThe type fix MUST be used when a commit represents a bug fix for your application.\nA scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser):\nA description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string.\nA longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description.\nA commit body is free-form and MAY consist of any number of newline separated paragraphs.\nOne or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed by either a :<space> or <space># separator, followed by a string value (this is inspired by the git trailer convention).\nA footer’s token MUST use - in place of whitespace characters, e.g., Acked-by (this helps differentiate the footer section from a multi-paragraph body). An exception is made for BREAKING CHANGE, which MAY also be used as a token.\nA footer’s value MAY contain spaces and newlines, and parsing MUST terminate when the next valid footer token/separator pair is observed.\nBreaking changes MUST be indicated in the type/scope prefix of a commit, or as an entry in the footer.\nIf included as a footer, a breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon, space, and description, e.g., BREAKING CHANGE: environment variables now take precedence over config files.\nIf included in the type/scope prefix, breaking changes MUST be indicated by a ! immediately before the :. If ! is used, BREAKING CHANGE: MAY be omitted from the footer section, and the commit description SHALL be used to describe the breaking change.\nTypes other than feat and fix MAY be used in your commit messages, e.g., docs: update ref docs.\nThe units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase.\nBREAKING-CHANGE MUST be synonymous with BREAKING CHANGE, when used as a token in a footer.'"
  llmc      = "!git llm-commit | git commit --amend -e -F -"

[init]
	defaultBranch = main

[fetch]
	prune = true

[pull]
	rebase = true

[push]
	default = simple
	autoSetupRemote = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[core]
	excludesfile = /Users/elvis/.gitignore_global
	editor = vim
	pager = delta

[delta]
	navigate = true    # use n and N to move between diff sections
	light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	line-numbers = true
	minus-style = red "#ffeeee"
	plus-style = green "#383830"
    side-by-side = false

[diff]
	colorMoved = default

[color]
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	grep = auto
	ui = auto

[interactive]
    diffFilter = delta --color-only

[stash]
    showStat = true
    showPatch = true

[merge]
	conflictstyle = diff3

[http]
	cookiefile = ~/.config/.gitcookies

[commit]
	template = ~/.config/git/.gitmessage
[credential "https://github.com"]
	helper = /opt/homebrew/bin/gh auth git-credential

[credential "https://source.developers.google.com"]
	helper = gcloud.sh
